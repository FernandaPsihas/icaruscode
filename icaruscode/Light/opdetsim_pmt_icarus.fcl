#include "photpropservices.fcl"
#include "opticaldetectormodules.fcl"
#include "opticaldetectorservices.fcl"

BEGIN_PROLOG
	
icarus_simpmt:	
{	
  module_type:               "SimPMTIcarus"
  InputModule:               "largeant"
  TransitTime:               55.1           #ns
  ADC:                       -11.1927       #charge to adc factor
  Baseline:                  8000.0         #in ADC
  FallTime:                  13.7           #ns
  RiseTime:                  3.8            #ns
  MeanAmplitude:             0.9            #in pC
  AmpNoise:                  1.0            #in ADC
  DarkNoiseRate:             1000.0         #in Hz

  ##This is the readout window size for each "trigger" on the electronics
  ReadoutWindowSize:         2000           #ticks (if 2ns each --> 4us)

  ##fraction of readout window size that should come before the "trigger" on the electronics
  PreTrigFraction:           0.25           # fraction

  ##Threshold in ADC counts for a PMT self-trigger.
  ##NOTE this is assumed to be positive-going and ABOVE BASELINE! Pulse polarity is corrected before determining trigger.
  ThresholdADC:              10             #ADC counts

  ##Pulse polarity: +1 for positive pulses, -1 for negative pulses
  PulsePolarity:             -1             #Pulse polarity (1 = positive, -1 = negative)
  TriggerOffsetPMT:          -1150          #Time (us) relative to trigger that readout begins
  ReadoutEnablePeriod:       3450           #Time (us) for which pmt readout is enabled
  CreateBeamGateTriggers:    true           #Option to create unbiased readout around beam spill
  BeamGateTriggerRepPeriod:  2.0            #Repetition Period (us) for BeamGateTriggers
  BeamGateTriggerNReps:      10             #Number of beamgate trigger reps to produce
  Saturation:                300            #in number of p.e. to see saturation effects in the signal
  #QE:                        0.07           #TPB coated PMT quantum efficiency
  QE:                        1.0            #TPB coated PMT quantum efficiency but is handled in the simulation and set to 1 here
  Sampling:                  0.5            #Give the desired value in GHz or use -1 for extracting from DetectorClocksService->OpticalClock().Frequency
}

services.OpDetResponseInterface:                  @local::standard_opdetresponse
services.PhotonVisibilityService.LibraryFile:     "14gen_nocat_small.root"
services.PhotonVisibilityService.UseCryoBoundary: false

services.PhotonVisibilityService.XMin: -366
services.PhotonVisibilityService.XMax: -66
services.PhotonVisibilityService.YMin: -210
services.PhotonVisibilityService.YMax:  180
services.PhotonVisibilityService.ZMin: -995
services.PhotonVisibilityService.ZMax:  965
services.PhotonVisibilityService.NX:     60
services.PhotonVisibilityService.NY:     78
services.PhotonVisibilityService.NZ:    392

END_PROLOG
