#include "backtracker.fcl"

#include "singles_icarus.fcl"
#include "largeantmodules_icarus.fcl"

##include "detsimmodules.fcl"
#include "detsimmodules_ICARUS.fcl"

#include "mccheatermodules.fcl"
#include "photpropservices.fcl"
#include "opticaldetectormodules.fcl"
#include "opticaldetectorservices.fcl"
#include "lightsource.fcl"

#include "services_icarus_simulation.fcl"
#include "prodsingle_common_icarus.fcl"

##include "reco_icarus_driver_common.fcl"

process_name: SinglesGenICA

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "Source_histo.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
                @table::icarus_g4_services
  BackTracker:  @local::standard_backtracker # defined in backtracker.fcl
  OpDetResponse: @local::standard_opdetresponse
}

services.PhotonVisibilityService: @local::standard_photonvisibilityservice

services.SignalShapingServiceICARUS: @erase

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::icarus_singlep
   lightgen:  @local::standard_lightsource     
   largeant:  @local::icarus_largeant	  
   mcreco:    @local::standard_mcreco     #defined in mcreco, needs largeant as input
   //reco:      @sequence::icarus_reco_signalprocessing
   daq:       @local::icarus_simwire
   rns:       { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   largana:   @local::standard_largeantana
   pmtresponse: @local::standard_simphotoncounter
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, lightgen, largeant, daq, mcreco] 
 analyzeIt:  [ largana, pmtresponse ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_ica.root"
   dataTier:    "simulated"
   compressionLevel: 1
   fastCloning: false 
 }
}

# set quantum efficiency supressed scint yield to 0.03 * 24000
# services.DetectorPropertiesService.ScintYield: 720

# enable optical physics in LArG4
services.LArG4Parameters.EnabledPhysics: [ "Em",
                                                "Optical",
                                                "SynchrotronAndGN",
                                                "Ion",
                                                "Hadron",
                                                "Decay",
                                                "HadronElastic",
                                                "Stopping",
                                                "NeutronTrackingCut" ]

# enable this custom physics list
services.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light
# services.DetectorPropertiesService.EnableCerenkovLight: true

# do not allow lightsource to write output into root file
physics.producers.generator.FillTree: true

physics.producers.generator.PDG: [ 2212 ]            # muon
physics.producers.generator.PosDist: 0             # Flat position dist.
physics.producers.generator.X0: [ 128.0 ]
physics.producers.generator.Y0: [ 0.0 ]
physics.producers.generator.Z0: [ 518.5 ]
physics.producers.generator.T0: [ 3925.0 ]
physics.producers.generator.SigmaX: [ 128.0 ]      # x = (0, 256)
physics.producers.generator.SigmaY: [ 116.5 ]      # y = (-116.5, 116.5)
physics.producers.generator.SigmaZ: [ 518.5 ]      # z = (0, 1037)
physics.producers.generator.SigmaT: [ 800.0 ]        # In time
physics.producers.generator.PDist: 0               # Flat momentum dist. (0.05-2.0 GeV)
physics.producers.generator.P0: [ 0.5 ]
physics.producers.generator.SigmaP: [ 0.5 ]
physics.producers.generator.AngleDist: 0           # Flat angle dist.
physics.producers.generator.Theta0XZ: [ 0. ]       # y-azimuth
physics.producers.generator.Theta0YZ: [ 0. ]       # y-latitude
physics.producers.generator.SigmaThetaXZ: [ 180. ] # Quasi-isotropic
physics.producers.generator.SigmaThetaYZ: [ 90. ]


# physics.producers.mcreco.MCRecoPart.SavePathPDGList: [13,-13,211,-211,111,311,310,130,321,-321,2212,2112,2224,2214,2114,1114,3122,
#                                                      1000010020,1000010030,1000020030,1000020040]

physics.producers.daq.NoiseFact:   0.


physics.analyzers.pmtresponse.MakeAllPhotonsTree: true
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: true
physics.analyzers.pmtresponse.MakeSimPhotonssTree: true
physics.analyzers.pmtresponse.MakeEventsTree: true


