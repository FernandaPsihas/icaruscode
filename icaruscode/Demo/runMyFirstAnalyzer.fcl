# Based on various existing job fcls...
# Copying the comments about the blocks largely from a Reco fcl
#  [ with some of my own thoughts added for good measure :) ]

#include "services_icarus.fcl"
#include "MyFirstAnalyzer.fcl"

#process_name: MyFirstAnalyzer

services:
{
  @table::icarus_basic_services
}

#source is a root file
source:
{
  module_type: RootInput
  maxEvents:  -1                 # Number of events to create, -1 for maximum limit
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  ## If we were writing a producer to add new products to events, 
  ## there would be the following:
  # producers:
  # {
  # }

  # Analyzer modules go here and will run on each event, putting their results into
  # the supplemental file that is output
  analyzers:
  {
    myAnalyzer: @local::myfirstanalyzer # This is the object we have defined in MyFirstAnalyzer.fcl
  }

  ## If we were using a producer (or filter):
  ## define the producer and filter modules for this path, order matters,
  ## filters reject all following items.  see lines starting physics.producers below
  # reco: [ ]

  ## define the output stream, there could be more than one if using filters
  ## For example, an output root file. If we wanted to add some product and save a new art root file
  ## then we could do that by editing the out1 appropriately below and including the stream. Since 
  ## we're not doing that, I leave it commented here.
  # stream:  [ out1 ]

  ## trigger_paths is a keyword and contains the paths that modify the art::event,
  ## ie filters and producers
  # trigger_paths: [reco]

  # analyzer path
  ana: [ myAnalyzer ]

  # end_paths is a keyword and contains the paths that do not modify the art::Event,
  # ie analyzers and output streams.  these all run simultaneously
  # We'll put analyzer here. If we _were_ using stream above, we'd want to add it here too
  end_paths:     [ana]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    fileName:    "%ifb_%tc-%p.root"
    dataTier:    "reconstructed"
  }
}

# Overrides for individual parameters above
# In this example, this could be a change in the TPC we're using with gaushitTPC0 to gaushitTPC1
#physics.analyzers.myAnalyzer.HitLabel: "gaushitTPC1"