#include "seedservice.fcl"
#include "singles.fcl"
#include "larproperties.fcl"
#include "magfield_larsoft.fcl"

#include "largeantmodules.fcl"
#include "mcreco.fcl"
#include "services_icarus_chr.fcl"


process_name: RecoIcarus

services:
{
@table::icarus_basic_services
}

#Start each new event with an empty event.
source:
{
  module_type:     RootInput
#  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:       10          # Number of events to create
#  firstRun:        1           # Run number to use for this file
#  firstEvent:      1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
   daq:       @local::standard_simwire
   rns:       { module_type: "RandomNumberSaver" }
 }

 analyzers:
{
#  calwir:       @local::standard_calwireana
  #hitfind:      @local::standard_hitfinder
}
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
#simulate: [ rns, caldata, hitfind ]
simulate: [ rns, daq ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_icarus.root"
   dataTier:    "reco-simulated"
   compressionLevel: 1

 }
}

physics.producers.daq.NoiseFact:   0.
