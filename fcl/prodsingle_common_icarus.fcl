#include "seedservice.fcl"
#include "singles.fcl"


process_name: SinglesGen

icarus_gen_services:
{
  #MagneticField: @local::no_mag_larsoft

  ExptGeoHelperInterface:
  { 
    service_provider : StandardGeometryHelper
  }

  Geometry:
  {
    SurfaceY:        6.9e2                           #in cm, vertical distance to the surface
    Name:            "icarus"
    GDML:            "icarus.gdml"
    ROOT:            "icarus.gdml"
    DisableWiresInG4: true                           # Whether to use wirefree geometry in LArG4
                                                     #  As per Brians request, wire free file is specified by
                                                     #  [GDMLFileName]_nowires.gdml
  }
  LArSeedService: @local::random_seedservice #use provided seeed service


  #DetectorPropertiesService.

  #LArPropertiesService:           @local::microboone_properties
  #DatabaseUtil:                   @local::microboone_database
  #DetectorClocksService:          @local::microboone_detectorclocks
  #SpaceCharge:                    @local::microboone_spacecharge
}

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.

  # Load the service that manages root files for histograms.
  TFileService: { fileName: "singles_hist_icarus.root" }

  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one

  RandomNumberGenerator: {} #ART native random number generator
  #FileCatalogMetadata:  @local::art_file_catalog_mc

  # Insert LArSoft services ...
  @table::icarus_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:       10          # Number of events to create
  firstRun:        1           # Run number to use for this file
  firstEvent:      1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_singlep   #defined in singles.fcl
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_icarus.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}
